#!/usr/bin/env python
"""
"""

from __future__ import absolute_import
import sys
from argparse import ArgumentParser, RawDescriptionHelpFormatter

from pytadbit.tools import tadbit_map
from pytadbit.tools import tadbit_parse
from pytadbit.tools import tadbit_filter
from pytadbit.tools import tadbit_describe

def main(arguments):
    if len(arguments) > 1:
        subcommand = arguments[1]
        if  subcommand == "version":
            from pytadbit import __version__
            print(__version__)
            return

    parser = ArgumentParser()
    subparser = parser.add_subparsers(title="AVAILABLE PROGRAMS")

    args_pp = {}

    # - MAP -
    args_pp["map"] = subparser.add_parser("map",
                                          description=tadbit_map.DESC,
                                          formatter_class=RawDescriptionHelpFormatter)
    args_pp["map"].set_defaults(func=tadbit_map.run)
    tadbit_map.populate_args(args_pp["map"])

    # - PARSE -
    args_pp["parse"] = subparser.add_parser("parse",
                                            description=tadbit_parse.DESC,
                                            formatter_class=RawDescriptionHelpFormatter)
    args_pp["parse"].set_defaults(func=tadbit_parse.run)
    tadbit_parse.populate_args(args_pp["parse"])

    # - FILTER -
    args_pp["filter"] = subparser.add_parser("filter",
                                             description=tadbit_filter.DESC,
                                             formatter_class=RawDescriptionHelpFormatter)
    args_pp["filter"].set_defaults(func=tadbit_filter.run)
    tadbit_filter.populate_args(args_pp["filter"])

    # - DESCRIBE -
    args_pp["describe"] = subparser.add_parser("describe",
                                             description=tadbit_describe.DESC,
                                             formatter_class=RawDescriptionHelpFormatter)
    args_pp["describe"].set_defaults(func=tadbit_describe.run)
    tadbit_describe.populate_args(args_pp["describe"])

    if len(arguments) == 1:
        parser.print_usage()
        return

    if len(arguments) == 2:
        try:
            args_pp[arguments[1]].print_help()
        except KeyError:
            parser.print_usage()
        return

    # Call main program
    args = parser.parse_args(arguments[1:])

    args.func(args)





if __name__ == "__main__":
    main(sys.argv)
